#!/usr/bin/env node

/**
 * Cross-platform Environment Checker Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
 * Works on Windows, macOS, and Linux
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Resolve paths relative to project root
const rootDir = path.resolve(__dirname, '..');
const envPath = path.join(rootDir, '.env');

// ANSI Color codes
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
};

function info(msg) {
  console.log(`${colors.blue}‚Ñπ${colors.reset} ${msg}`);
}

function success(msg) {
  console.log(`${colors.green}‚úì${colors.reset} ${msg}`);
}

function error(msg) {
  console.error(`${colors.red}‚úó${colors.reset} ${msg}`);
}

function warning(msg) {
  console.log(`${colors.yellow}‚ö†${colors.reset} ${msg}`);
}

// –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env —Ñ–∞–π–ª–∞
function getEnvValue(filePath, key) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.startsWith(key + '=')) {
        return trimmed.substring(key.length + 1).trim();
      }
    }
    return null;
  } catch (err) {
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è Windows)
function checkPort(port, service) {
  try {
    const isWindows = process.platform === 'win32';
    if (isWindows) {
      // –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º netstat
      const output = execSync(`netstat -ano | findstr :${port}`, { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] });
      if (output.trim()) {
        success(`${service} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        return true;
      }
    } else {
      // –ù–∞ Unix-like —Å–∏—Å—Ç–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º lsof –∏–ª–∏ nc
      try {
        execSync(`lsof -i :${port}`, { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] });
        success(`${service} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        return true;
      } catch (err) {
        // lsof –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º nc
        try {
          execSync(`nc -z localhost ${port}`, { encoding: 'utf8', stdio: ['pipe', 'pipe', 'ignore'] });
          success(`${service} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
          return true;
        } catch (ncErr) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ nc —Ç–æ–∂–µ –Ω–µ—Ç
        }
      }
    }
  } catch (err) {
    // –ü–æ—Ä—Ç –Ω–µ –∑–∞–Ω—è—Ç/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
  
  warning(`${service} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
function checkDocker() {
  try {
    execSync('docker --version', { stdio: 'ignore' });
    execSync('docker compose version', { stdio: 'ignore' });
    success('Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    return true;
  } catch (err) {
    error('Docker –∏–ª–∏ Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏
function checkNode() {
  const version = process.version;
  const major = parseInt(version.slice(1).split('.')[0]);
  
  if (major >= 18) {
    success(`Node.js ${version} ‚úì (—Ç—Ä–µ–±—É–µ—Ç—Å—è >=18.0.0)`);
    return true;
  } else {
    error(`Node.js ${version} —É—Å—Ç–∞—Ä–µ–ª–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è >=18.0.0)`);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm
function checkPnpm() {
  try {
    const version = execSync('pnpm --version', { encoding: 'utf8' }).trim();
    const major = parseInt(version.split('.')[0]);
    
    if (major >= 9) {
      success(`pnpm ${version} ‚úì (—Ç—Ä–µ–±—É–µ—Ç—Å—è >=9.0.0)`);
      return true;
    } else {
      warning(`pnpm ${version} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >=9.0.0)`);
      return true;
    }
  } catch (err) {
    error('pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g pnpm@latest');
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function main() {
  console.log('');
  console.log('='.repeat(50));
  console.log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Fin-U-CH');
  console.log('='.repeat(50));
  console.log('');

  let hasErrors = false;
  let hasWarnings = false;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
  info('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...');
  if (!checkNode()) hasErrors = true;
  console.log('');

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm
  info('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm...');
  if (!checkPnpm()) hasErrors = true;
  console.log('');

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
  info('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...');
  if (!fs.existsSync(envPath)) {
    error('.env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('  –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pnpm env:setup');
    hasErrors = true;
  } else {
    success('.env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const requiredVars = ['NODE_ENV', 'DATABASE_URL', 'JWT_SECRET', 'PORT'];
    let allVarsPresent = true;

    requiredVars.forEach((varName) => {
      const value = getEnvValue(envPath, varName);
      if (!value) {
        error(`  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        allVarsPresent = false;
      }
    });

    if (allVarsPresent) {
      success('–í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } else {
      hasErrors = true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
    const jwtSecret = getEnvValue(envPath, 'JWT_SECRET');
    if (jwtSecret && jwtSecret.includes('change-me')) {
      warning('JWT_SECRET –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
      warning('–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ!');
      hasWarnings = true;
    }
  }
  console.log('');

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
  info('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...');
  const dockerInstalled = checkDocker();
  console.log('');

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (PostgreSQL, Redis)
  if (dockerInstalled) {
    info('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    
    const dbUrl = getEnvValue(envPath, 'DATABASE_URL');
    let dbPort = 5432;
    if (dbUrl) {
      const match = dbUrl.match(/:(\d+)\//);
      if (match) {
        dbPort = parseInt(match[1]);
      }
    }
    
    const redisUrl = getEnvValue(envPath, 'REDIS_URL');
    let redisPort = 6379;
    if (redisUrl) {
      const match = redisUrl.match(/:(\d+)$/);
      if (match) {
        redisPort = parseInt(match[1]);
      }
    }

    const pgAvailable = checkPort(dbPort, 'PostgreSQL');
    const redisAvailable = checkPort(redisPort, 'Redis');

    if (!pgAvailable || !redisAvailable) {
      warning('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      console.log('  –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker —Å–µ—Ä–≤–∏—Å—ã:');
      console.log('  docker compose -f ops/docker/docker-compose.yml up -d');
      hasWarnings = true;
    }
    console.log('');
  }

  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Prisma Client
  info('6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Prisma...');
  const prismaClientPath = path.join(rootDir, 'apps', 'api', 'node_modules', '@prisma', 'client');
  if (fs.existsSync(prismaClientPath)) {
    success('Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } else {
    error('Prisma Client –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('  –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: cd apps/api && pnpm prisma:generate');
    hasErrors = true;
  }
  console.log('');

  // –ò—Ç–æ–≥–∏
  console.log('='.repeat(50));
  if (hasErrors) {
    error('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!');
    console.log('');
    console.log('üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:');
    console.log('  - docs/DEV_GUIDE.md');
    console.log('  - docs/ENV_SETUP.md');
    console.log('  - docs/WINDOWS_SETUP.md (–¥–ª—è Windows)');
    console.log('');
    process.exit(1);
  } else if (hasWarnings) {
    warning('–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
    console.log('');
    process.exit(0);
  } else {
    success('–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! ‚ú®');
    console.log('');
    console.log('üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:');
    console.log('  pnpm dev  # —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞');
    console.log('');
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫
try {
  main();
} catch (err) {
  error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
  process.exit(1);
}

