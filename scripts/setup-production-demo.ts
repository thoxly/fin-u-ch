#!/usr/bin/env tsx
/* eslint-disable no-console */

import demoUserService from '../apps/api/src/modules/demo/demo.service';

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
 */
async function setupProductionDemo(): Promise<void> {
  try {
    console.log('üöÄ Setting up production demo user...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const exists = await demoUserService.exists();

    if (exists) {
      const info = await demoUserService.getInfo();
      if (info) {
        console.log('‚úÖ Demo user already exists:', info.user.email);
        console.log('   Company:', info.company.name);
        console.log('   User ID:', info.user.id);
        console.log('   Operations:', info.operationsCount);
        console.log('   Plans:', info.plansCount);
        console.log('   Accounts:', info.accountsCount);
        console.log('   Articles:', info.articlesCount);
        console.log('   Counterparties:', info.counterpartiesCount);

        if (info.operationsCount > 0) {
          console.log('‚úÖ Demo user has sample data');
          return;
        } else {
          console.log(
            '‚ö†Ô∏è  Demo user exists but has no data. Adding sample data...'
          );
          await demoUserService.delete();
        }
      }
    }

    console.log('üîß Creating demo user with sample data...');
    const demoUser = await demoUserService.create();

    console.log('‚úÖ Demo user created successfully!');
    console.log('');
    console.log('üìã Demo Credentials:');
    console.log('   Email:', demoUser.user.email);
    console.log('   Company:', demoUser.company.name);
    console.log('   Operations:', demoUser.operationsCount);
    console.log('   Plans:', demoUser.plansCount);
    console.log('   Accounts:', demoUser.accountsCount);
    console.log('   Articles:', demoUser.articlesCount);
    console.log('   Counterparties:', demoUser.counterpartiesCount);
    console.log('');
    console.log('üéâ Demo user setup completed!');
  } catch (error) {
    console.error('‚ùå Failed to setup production demo user:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === new URL(process.argv[1], 'file:').href) {
  setupProductionDemo()
    .then(() => {
      console.log('‚úÖ Setup completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Setup failed:', error);
      process.exit(1);
    });
}

export default setupProductionDemo;
