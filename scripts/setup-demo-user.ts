#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å—Ä–µ–¥–∞—Ö: dev, test, production
 */
async function setupDemoUser() {
  try {
    console.log('üîß Setting up demo user for E2E tests...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.user.findUnique({
      where: { email: 'demo@example.com' },
      include: { company: true },
    });

    if (existingUser) {
      console.log('‚úÖ Demo user already exists:', existingUser.email);
      console.log('   Company:', existingUser.company.name);
      console.log('   User ID:', existingUser.id);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üì¶ Creating demo company...');
    const company = await prisma.company.create({
      data: {
        name: '–î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è –û–û–û',
        currencyBase: 'RUB',
      },
    });
    console.log('‚úÖ Company created:', company.name, '(ID:', company.id, ')');

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ Creating demo user...');
    const hashedPassword = await bcrypt.hash('demo123', 10);
    const user = await prisma.user.create({
      data: {
        companyId: company.id,
        email: 'demo@example.com',
        passwordHash: hashedPassword,
        isActive: true,
      },
    });
    console.log('‚úÖ Demo user created:', user.email, '(ID:', user.id, ')');

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    console.log('üìö Creating initial catalogs...');
    await createInitialCatalogs(company.id);

    console.log('');
    console.log('üéâ Demo user setup completed!');
    console.log('   Email: demo@example.com');
    console.log('   Password: demo123');
    console.log('   Company: –î–µ–º–æ –ö–æ–º–ø–∞–Ω–∏—è –û–û–û');
    console.log('');
  } catch (error) {
    console.error('‚ùå Failed to setup demo user:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –¥–µ–º–æ-–∫–æ–º–ø–∞–Ω–∏–∏
 */
async function createInitialCatalogs(companyId: string) {
  // –°—Ç–∞—Ç—å–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const articles = [
    { name: '–í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂', type: 'INCOME' as const },
    { name: '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã', type: 'INCOME' as const },
    { name: '–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', type: 'EXPENSE' as const },
    { name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', type: 'EXPENSE' as const },
    { name: '–ê—Ä–µ–Ω–¥–∞', type: 'EXPENSE' as const },
    { name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', type: 'EXPENSE' as const },
    { name: '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', type: 'EXPENSE' as const },
  ];

  for (const article of articles) {
    await prisma.article.upsert({
      where: {
        companyId_name: {
          companyId,
          name: article.name,
        },
      },
      update: {},
      create: {
        companyId,
        name: article.name,
        type: article.type,
      },
    });
  }

  // –°—á–µ—Ç–∞
  const accounts = [
    { name: '–ö–∞—Å—Å–∞', type: 'CASH' as const },
    { name: '–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç', type: 'BANK' as const },
    { name: '–í–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç', type: 'BANK' as const },
  ];

  for (const account of accounts) {
    await prisma.account.upsert({
      where: {
        companyId_name: {
          companyId,
          name: account.name,
        },
      },
      update: {},
      create: {
        companyId,
        name: account.name,
        type: account.type,
      },
    });
  }

  // –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  const departments = [
    '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂',
    '–û—Ç–¥–µ–ª –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',
    '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
    'IT –æ—Ç–¥–µ–ª',
  ];

  for (const deptName of departments) {
    await prisma.department.upsert({
      where: {
        companyId_name: {
          companyId,
          name: deptName,
        },
      },
      update: {},
      create: {
        companyId,
        name: deptName,
      },
    });
  }

  // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
  const counterparties = [
    '–û–û–û "–ü–æ—Å—Ç–∞–≤—â–∏–∫"',
    '–ò–ü –ò–≤–∞–Ω–æ–≤ –ò.–ò.',
    '–û–ê–û "–ö–ª–∏–µ–Ω—Ç"',
    '–ó–ê–û "–ü–∞—Ä—Ç–Ω–µ—Ä"',
  ];

  for (const cpName of counterparties) {
    await prisma.counterparty.upsert({
      where: {
        companyId_name: {
          companyId,
          name: cpName,
        },
      },
      update: {},
      create: {
        companyId,
        name: cpName,
      },
    });
  }

  console.log('‚úÖ Initial catalogs created');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  setupDemoUser()
    .then(() => {
      console.log('‚úÖ Setup completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Setup failed:', error);
      process.exit(1);
    });
}

export { setupDemoUser };
