#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 */

import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

import { env } from '../config/env';
import logger from '../config/logger';
import demoUserService from '../modules/demo/demo.service';

async function initDemoUser(): Promise<void> {
  logger.info('üöÄ Initializing demo user...');

  try {
    const exists = await demoUserService.exists();
    if (!exists) {
      logger.info('Demo user not found, creating...');
      const demoUser = await demoUserService.create();
      logger.info(`‚úÖ Demo user created: ${demoUser.user.email}`);
      logger.info(
        `üìä Demo data: ${demoUser.operationsCount} operations, ${demoUser.accountsCount} accounts`
      );
    } else {
      logger.info('‚úÖ Demo user already exists');
    }

    logger.info('üéâ Demo user initialization completed');
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Failed to setup demo user:', {
      error: error instanceof Error ? error.message : String(error),
    });
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  initDemoUser();
}

export { initDemoUser };
