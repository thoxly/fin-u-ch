import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';
import { formatMoney } from '../lib/money';
import { AggregatedDataPoint } from '../lib/dataAggregation';
import { ChartLegend } from './ChartLegend';
import { ExportRow } from '../lib/exportData';
import { ExportMenu } from './ExportMenu';
import { InfoHint } from './InfoHint';
import { useIsSmallScreen } from '../hooks/useIsSmallScreen';

interface WeeklyFlowChartProps {
  data: AggregatedDataPoint[];
  className?: string;
}

export const WeeklyFlowChart: React.FC<WeeklyFlowChartProps> = ({
  data,
  className = '',
}) => {
  const isSmall = useIsSmallScreen();
  // Tooltip content overridden below via custom renderer

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  const filteredData = data;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const hasData = filteredData && filteredData.length > 0;

  const buildExportRows = (): ExportRow[] => {
    const rows: ExportRow[] = [];
    (filteredData || []).forEach((p) => {
      rows.push({
        date: p.date || p.label,
        category: '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
        amount: p.income,
        type: 'income',
      });
      rows.push({
        date: p.date || p.label,
        category: '–°–ø–∏—Å–∞–Ω–∏—è',
        amount: p.expense,
        type: 'expense',
      });
    });
    return rows;
  };

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Å—Ç–æ–ª–±—Ü–æ–≤, –Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  if (!data || data.length === 0 || !hasData) {
    return (
      <div
        className={`bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 ${className}`}
      >
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π
            </h3>
            <InfoHint
              content={
                <div>
                  <div className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                    –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π
                  </div>
                  <div>
                    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º: –∫–æ–≥–¥–∞ –∏ –≤ –∫–∞–∫–æ–º –æ–±—ä—ë–º–µ
                    –ø–æ—Å—Ç—É–ø–∞–ª–∏ –¥–æ—Ö–æ–¥—ã –∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å
                    –ø–∏–∫–∏ –∏ —Å–ø–∞–¥—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
                  </div>
                </div>
              }
            />
          </div>
          <ExportMenu
            filenameBase="weekly_flow"
            buildRows={buildExportRows}
            columns={['date', 'category', 'amount', 'type']}
          />
        </div>

        <div className="chart-body relative">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={data || []}
              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid
                strokeDasharray="3 3"
                className="stroke-gray-200 dark:stroke-gray-600"
              />
              <XAxis
                dataKey="label"
                className="text-gray-600 dark:text-gray-400"
                fontSize={12}
              />
              <YAxis
                className="text-gray-600 dark:text-gray-400"
                fontSize={12}
                tickFormatter={(value) => formatMoney(value)}
                domain={[
                  (min: number) => (Number.isFinite(min) ? min * 0.95 : min),
                  (max: number) => (Number.isFinite(max) ? max * 1.05 : max),
                ]}
              />
              <Tooltip
                cursor={false}
                content={({ active, payload, label }) => {
                  if (!active || !payload || payload.length === 0) return null;
                  const p = payload[0]?.payload as
                    | AggregatedDataPoint
                    | undefined;
                  if (!p) return null;
                  return (
                    <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-2 min-w-[170px]">
                      <div className="mb-1">
                        <p className="text-[13px] font-semibold text-gray-900 dark:text-white">
                          {label}
                        </p>
                      </div>
                      <div className="space-y-0.5">
                        <div className="flex items-center justify-between text-[11px]">
                          <span className="text-gray-600 dark:text-gray-400">
                            –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                          </span>
                          <span className="font-semibold text-green-600 dark:text-green-400">
                            {formatMoney(p.income || 0)}
                          </span>
                        </div>
                        <div className="flex items-center justify-between text-[11px]">
                          <span className="text-gray-600 dark:text-gray-400">
                            –°–ø–∏—Å–∞–Ω–∏—è
                          </span>
                          <span className="font-semibold text-red-600 dark:text-red-400">
                            {formatMoney(p.expense || 0)}
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                }}
              />
              {/* –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –∏ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö */}
            </BarChart>
          </ResponsiveContainer>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –≥—Ä–∞—Ñ–∏–∫–∞ */}
          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
            <div className="text-center text-gray-500 dark:text-gray-400 bg-white/80 dark:bg-gray-800/80 px-4 py-2 rounded-lg">
              <div className="text-2xl mb-1">üìà</div>
              <div className="text-sm font-medium">
                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div
      className={`bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 ${className}`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
            –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π
          </h3>
          <InfoHint
            content={
              <div>
                <div className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                  –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ —Å–ø–∏—Å–∞–Ω–∏–π
                </div>
                <div>
                  –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º: –∫–æ–≥–¥–∞ –∏ –≤ –∫–∞–∫–æ–º –æ–±—ä—ë–º–µ
                  –ø–æ—Å—Ç—É–ø–∞–ª–∏ –¥–æ—Ö–æ–¥—ã –∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Ä–∞—Å—Ö–æ–¥—ã. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø–∏–∫–∏
                  –∏ —Å–ø–∞–¥—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
                </div>
              </div>
            }
          />
        </div>
        <ExportMenu
          filenameBase="weekly_flow"
          buildRows={buildExportRows}
          columns={['date', 'category', 'amount', 'type']}
        />
      </div>
      <div className="chart-body">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={filteredData}
            margin={{ top: 5, right: 30, left: 20, bottom: 48 }}
          >
            <CartesianGrid
              strokeDasharray="3 3"
              className="stroke-gray-200 dark:stroke-gray-600"
            />
            <XAxis
              dataKey="label"
              className="text-gray-600 dark:text-gray-400"
              fontSize={12}
              tick={{ fontSize: 11 }}
              angle={filteredData.length > 8 ? -45 : 0}
              textAnchor={filteredData.length > 8 ? 'end' : 'middle'}
              height={filteredData.length > 8 ? 80 : 30}
            />
            <YAxis
              className="text-gray-600 dark:text-gray-400"
              fontSize={12}
              tickFormatter={(value) => formatMoney(value)}
              domain={[
                (min: number) => (Number.isFinite(min) ? min * 0.95 : min),
                (max: number) => (Number.isFinite(max) ? max * 1.05 : max),
              ]}
            />
            <Tooltip
              cursor={false}
              content={({ active, payload, label }) => {
                if (!active || !payload || payload.length === 0) return null;
                const p = payload[0]?.payload as
                  | AggregatedDataPoint
                  | undefined;
                if (!p) return null;
                return (
                  <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-2 min-w-[170px]">
                    <div className="mb-1">
                      <p className="text-[13px] font-semibold text-gray-900 dark:text-white">
                        {label}
                      </p>
                    </div>
                    <div className="space-y-0.5">
                      <div className="flex items-center justify-between text-[11px]">
                        <span className="text-gray-600 dark:text-gray-400">
                          –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                        </span>
                        <span className="font-semibold text-green-600 dark:text-green-400">
                          {formatMoney(p.income || 0)}
                        </span>
                      </div>
                      <div className="flex items-center justify-between text-[11px]">
                        <span className="text-gray-600 dark:text-gray-400">
                          –°–ø–∏—Å–∞–Ω–∏—è
                        </span>
                        <span className="font-semibold text-red-600 dark:text-red-400">
                          {formatMoney(p.expense || 0)}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              }}
            />
            {!isSmall && (
              <Legend
                verticalAlign="bottom"
                align="center"
                content={
                  <ChartLegend preferredOrder={['–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', '–°–ø–∏—Å–∞–Ω–∏—è']} />
                }
                wrapperStyle={{ paddingTop: 8 }}
              />
            )}
            <Bar
              dataKey="income"
              fill="#10b981"
              name="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
              radius={[2, 2, 0, 0]}
            />
            <Bar
              dataKey="expense"
              fill="#ef4444"
              name="–°–ø–∏—Å–∞–Ω–∏—è"
              radius={[2, 2, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};
