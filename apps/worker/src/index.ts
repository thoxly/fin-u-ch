import cron from 'node-cron';
import { logger } from './config/logger';
import { env } from './config/env';
import {
  generateSalaryOperations,
  getCurrentMonth,
} from './jobs/salary.generate.monthly';
import { prisma } from './config/prisma';

logger.info('üöÄ Worker starting...');
logger.info(`Environment: ${env.NODE_ENV}`);

/**
 * –ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ 1-–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ 00:00
 * Cron pattern: '0 0 1 * *' (–º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏)
 */
const salaryGenerationTask = cron.schedule(
  '0 0 1 * *',
  async () => {
    logger.info('üîÑ Running scheduled salary generation task...');

    try {
      const currentMonth = getCurrentMonth();
      await generateSalaryOperations({ month: currentMonth });
      logger.info('‚úÖ Salary generation task completed successfully');
    } catch (error) {
      logger.error('‚ùå Salary generation task failed:', error);
    }
  },
  {
    scheduled: true,
    timezone: 'Europe/Moscow', // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function runSalaryGenerationManually(
  month?: string
): Promise<void> {
  logger.info('üîß Manual salary generation triggered');

  try {
    const targetMonth = month || getCurrentMonth();
    await generateSalaryOperations({ month: targetMonth });
    logger.info('‚úÖ Manual salary generation completed successfully');
  } catch (error) {
    logger.error('‚ùå Manual salary generation failed:', error);
    throw error;
  }
}

// Graceful shutdown
const shutdown = async (signal: string) => {
  logger.info(`${signal} received, shutting down gracefully...`);

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron –∑–∞–¥–∞—á–∏
  salaryGenerationTask.stop();

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º Prisma —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  await prisma.$disconnect();

  logger.info('Worker stopped');
  process.exit(0);
};

process.on('SIGINT', () => shutdown('SIGINT'));
process.on('SIGTERM', () => shutdown('SIGTERM'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
prisma
  .$connect()
  .then(() => {
    logger.info('‚úÖ Database connection established');
    logger.info(
      '‚úÖ Salary generation task scheduled (runs on 1st of each month at 00:00)'
    );
    logger.info('üë∑ Worker is running and waiting for scheduled tasks...');
  })
  .catch((error: unknown) => {
    logger.error('‚ùå Failed to connect to database:', error);
    process.exit(1);
  });

// Keep the process alive
process.stdin.resume();
