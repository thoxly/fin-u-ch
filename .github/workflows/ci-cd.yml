name: CI/CD with AI Review

on:
  pull_request:
    branches: [dev, main]
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.gitignore'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # ============================================
  # Быстрые проверки (lint, format, types)
  # Запускается: всегда для PR, пропускается для push в main (уже проверено)
  # ============================================
  quick-checks:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache Prisma Client
        uses: actions/cache@v3
        id: cache-prisma
        with:
          path: |
            apps/api/node_modules/.prisma
            apps/worker/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}

      - name: Generate Prisma Client (API)
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: pnpm --filter api prisma:generate

      - name: Generate Prisma Client (Worker)
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: pnpm --filter worker prisma:generate

      - name: Lint
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Type check
        run: pnpm type-check

  # ============================================
  # AI Code Review (только для PR, не блокирует другие проверки)
  # Экономия: пропускаем для PR из dev в main (код уже проверен)
  # ============================================
  ai-code-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref != 'main'
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build AI Review script
        run: pnpm --filter @fin-u-ch/ai-review build

      - name: Run AI Code Review
        working-directory: scripts/ai-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
        run: pnpm start

  # ============================================
  # Сборка и тесты (объединены для оптимизации)
  # Всегда выполняется: для PR проверяет код, для push в main создает build для Docker
  # ============================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [quick-checks]
    if: |
      always() && 
      (needs.quick-checks.result == 'success' || needs.quick-checks.result == 'skipped')
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fin_u_ch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fin_u_ch_test
      REDIS_URL: redis://localhost:6379
      JWT_SECRET: test-jwt-secret
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm --filter @fin-u-ch/shared build

      - name: Cache Prisma Client
        uses: actions/cache@v3
        id: cache-prisma
        with:
          path: |
            apps/api/node_modules/.prisma
            apps/worker/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}

      - name: Generate Prisma Client (API)
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: pnpm --filter api prisma:generate

      - name: Build API
        run: pnpm --filter api build

      - name: Run Prisma migrations
        run: pnpm --filter api prisma:deploy

      - name: Create demo user for E2E tests
        working-directory: apps/api
        run: npx tsx ../../scripts/setup-demo-user.ts

      - name: Run unit tests (API)
        run: pnpm --filter api test:coverage

      - name: Build Web
        run: pnpm --filter web build

      - name: Run unit tests (Web)
        run: pnpm --filter web test:coverage

      - name: Generate Prisma Client (Worker)
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: pnpm --filter worker prisma:generate

      - name: Build Worker
        run: pnpm --filter worker build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/shared/dist
            apps/api/dist
            apps/web/dist
            apps/worker/dist
          retention-days: 1

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: |
            apps/api/coverage/lcov.info
            apps/web/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================
  # E2E тесты (только для PR в main)
  # Запускаем только smoke тесты для быстрой проверки
  # ============================================
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    needs: [build-and-test]
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fin_u_ch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fin_u_ch_test
      REDIS_URL: redis://localhost:6379
      JWT_SECRET: test-jwt-secret
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('apps/web/package.json') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: apps/web
        run: npx playwright install --with-deps chromium

      - name: Cache Prisma Client
        uses: actions/cache@v3
        id: cache-prisma
        with:
          path: |
            apps/api/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/schema.prisma') }}

      - name: Generate Prisma Client (API)
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: pnpm --filter api prisma:generate

      - name: Run Prisma migrations
        run: pnpm --filter api prisma:deploy

      - name: Create demo user for E2E tests
        working-directory: apps/api
        run: npx tsx ../../scripts/setup-demo-user.ts

      - name: Start API server in background
        working-directory: apps/api
        run: |
          node dist/server.js &
          echo $! > api.pid
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          NODE_ENV: ${{ env.NODE_ENV }}
          PORT: 4000

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to be ready..."
          for i in {1..20}; do
            if curl -f http://localhost:4000/api/health 2>/dev/null; then
              echo "✅ API is ready!"
              exit 0
            fi
            echo "Attempt $i/20: API not ready yet, waiting..."
            sleep 1
          done
          echo "❌ API failed to start"
          cat apps/api/api.pid || true
          exit 1

      - name: Start Web server in background
        working-directory: apps/web
        run: |
          npx vite preview --port 3000 --host &
          echo $! > web.pid

      - name: Wait for Web to be ready
        run: |
          echo "Waiting for Web server to be ready..."
          for i in {1..15}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "✅ Web server is ready!"
              exit 0
            fi
            echo "Attempt $i/15: Web not ready yet, waiting..."
            sleep 1
          done
          echo "❌ Web server failed to start"
          cat apps/web/web.pid || true
          exit 1

      - name: Run E2E tests
        working-directory: apps/web
        run: pnpm test:e2e:smoke
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          JWT_SECRET: ${{ env.JWT_SECRET }}
          NODE_ENV: ${{ env.NODE_ENV }}
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report
          retention-days: 7

  # ============================================
  # Security Scan (только для PR, параллельно с build)
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [quick-checks]
    if: |
      always() && github.event_name == 'pull_request' &&
      (needs.quick-checks.result == 'success' || needs.quick-checks.result == 'skipped')
    timeout-minutes: 8
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level=high || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # Docker Build & Push (только для main после успешного build)
  # ============================================
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    if: |
      always() &&
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      needs.build-and-test.result == 'success'
    needs: [build-and-test]
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ops/docker/api.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/fin-u-ch-api:latest
            ghcr.io/${{ github.repository_owner }}/fin-u-ch-api:${{ steps.meta.outputs.sha_short }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/fin-u-ch-api:latest
          cache-to: type=inline

      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ops/docker/web.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/fin-u-ch-web:latest
            ghcr.io/${{ github.repository_owner }}/fin-u-ch-web:${{ steps.meta.outputs.sha_short }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/fin-u-ch-web:latest
          cache-to: type=inline

      - name: Build and push Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./ops/docker/worker.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/fin-u-ch-worker:latest
            ghcr.io/${{ github.repository_owner }}/fin-u-ch-worker:${{ steps.meta.outputs.sha_short }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/fin-u-ch-worker:latest
          cache-to: type=inline

  # ============================================
  # Deploy на VPS (только для push в main после успешной сборки Docker)
  # ============================================
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    if: |
      always() &&
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      needs.docker-build.result == 'success'
    needs: [docker-build]
    timeout-minutes: 10
    environment:
      name: production
      url: http://83.166.244.139

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup before deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            'cd /opt/fin-u-ch && docker compose exec -T postgres pg_dump -U postgres fin_u_ch > backups/backup-$(date +%Y%m%d-%H%M%S).sql' || true

      - name: Copy docker-compose to VPS
        run: |
          scp -i ~/.ssh/deploy_key ops/docker/docker-compose.prod.yml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/fin-u-ch/docker-compose.prod.yml
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'mkdir -p /opt/fin-u-ch/nginx'
          scp -i ~/.ssh/deploy_key ops/nginx/nginx.conf ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/fin-u-ch/nginx/nginx.conf || true
          scp -i ~/.ssh/deploy_key ops/nginx/nginx-ssl.conf ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/fin-u-ch/nginx/nginx-ssl.conf || true

      - name: Ensure VPS environment variables
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/fin-u-ch
            # Убедимся, что DOCKER_IMAGE_PREFIX установлен правильно
            if ! grep -q "DOCKER_IMAGE_PREFIX" .env 2>/dev/null; then
              echo "DOCKER_IMAGE_PREFIX=${{ github.repository_owner }}" >> .env
            else
              sed -i "s|^DOCKER_IMAGE_PREFIX=.*|DOCKER_IMAGE_PREFIX=${{ github.repository_owner }}|g" .env
            fi
            # Убедимся, что DOCKER_REGISTRY установлен
            if ! grep -q "DOCKER_REGISTRY" .env 2>/dev/null; then
              echo "DOCKER_REGISTRY=ghcr.io" >> .env
            fi
            # Убедимся, что IMAGE_TAG установлен
            if ! grep -q "IMAGE_TAG" .env 2>/dev/null; then
              echo "IMAGE_TAG=latest" >> .env
            fi
          EOF

      - name: Deploy to VPS
        run: |
          # Create deploy script on VPS
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "cat > /opt/fin-u-ch/deploy.sh" << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e

          echo "=== Starting deployment at $(date) ==="
          cd /opt/fin-u-ch

          # Login to GHCR
          echo "📦 Logging into GHCR..."
          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GITHUB_OWNER" --password-stdin

          # Check current state
          echo "=== Current containers (before update) ==="
          docker ps --filter name=fin-u-ch --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"

          # Pull new images
          echo "=== Pulling new images ==="
          docker compose -f docker-compose.prod.yml pull api web worker nginx

          # Check available images
          echo "=== Available images ==="
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}" | grep fin-u-ch | head -n 10

          # Apply database migrations
          echo "=== Applying database migrations ==="
          docker compose -f docker-compose.prod.yml run --rm api npx prisma migrate deploy

          # Stop and remove old containers
          echo "=== Stopping and removing old containers ==="
          docker compose -f docker-compose.prod.yml stop api web worker nginx
          docker compose -f docker-compose.prod.yml rm -f api web worker nginx

          # Start with new images
          echo "=== Starting containers with new images ==="
          docker compose -f docker-compose.prod.yml up -d --force-recreate --pull always api web worker nginx

          # Wait for health checks
          echo "=== Waiting for services to be healthy (30 seconds) ==="
          sleep 30

          # Check final state
          echo "=== New containers (after update) ==="
          docker ps --filter name=fin-u-ch --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"

          # Cleanup
          echo "=== Cleaning up unused Docker resources ==="
          docker container prune -f
          docker image prune -af --filter "until=168h"

          echo "✅ Deployment completed successfully at $(date)!"
          DEPLOY_SCRIPT

          # Make script executable
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "chmod +x /opt/fin-u-ch/deploy.sh"

          # Execute deploy script with environment variables
          echo "🚀 Executing deployment script..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "GHCR_TOKEN='${{ secrets.GHCR_TOKEN }}' GITHUB_OWNER='${{ github.repository_owner }}' /opt/fin-u-ch/deploy.sh"

      - name: Health check
        run: |
          echo "Waiting for services to start (45 seconds)..."
          sleep 45

          # Retry health check up to 5 times with 10 second intervals
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f http://${{ secrets.VPS_HOST }}/api/health; then
              echo "✅ Health check passed!"
              exit 0
            fi
            if [ $i -lt 5 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done

          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful to production"
          else
            echo "❌ Deployment failed"
            exit 1
          fi

  # ============================================
  # Финальная нотификация
  # ============================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    if: always()
    needs:
      [
        quick-checks,
        ai-code-review,
        build-and-test,
        test-e2e,
        security-scan,
        docker-build,
        deploy,
      ]

    steps:
      - name: Summary
        run: |
          echo "## CI/CD Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Type Check: ${{ needs.quick-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- AI Code Review: ${{ needs.ai-code-review.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.test-e2e.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
