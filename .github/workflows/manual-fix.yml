name: Manual VPS Fix

on:
  workflow_dispatch:

jobs:
  clean-and-redeploy:
    name: Clean Docker and Redeploy
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Clean Docker on VPS
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd /opt/fin-u-ch
            
            echo "===== Stopping all containers ====="
            docker compose -f docker-compose.prod.yml down
            
            echo "===== Removing old images ====="
            docker rmi $(docker images "ghcr.io/thoxly/fin-u-ch-api" -q) || true
            docker rmi $(docker images "ghcr.io/thoxly/fin-u-ch-web" -q) || true
            docker rmi $(docker images "ghcr.io/thoxly/fin-u-ch-worker" -q) || true
            
            echo "===== Cleaning Docker system ====="
            docker system prune -a -f
            
            echo "✅ Docker cleaned successfully!"
          EOF

      - name: Login to GHCR and Pull new images
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd /opt/fin-u-ch
            
            echo "===== Logging in to GHCR ====="
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u thoxly --password-stdin
            
            echo "===== Pulling new images ====="
            docker compose -f docker-compose.prod.yml pull
            
            echo "✅ Images pulled successfully!"
          EOF

      - name: Run migrations and start services
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd /opt/fin-u-ch
            
            echo "===== Starting database services ====="
            docker compose -f docker-compose.prod.yml up -d postgres redis
            sleep 10
            
            echo "===== Running migrations ====="
            docker compose -f docker-compose.prod.yml run --rm api npx prisma migrate deploy
            
            echo "===== Starting all services ====="
            docker compose -f docker-compose.prod.yml up -d
            
            echo "===== Waiting for services to start ====="
            sleep 20
            
            echo "===== Container status ====="
            docker compose -f docker-compose.prod.yml ps
            
            echo "✅ Services started successfully!"
          EOF

      - name: Health check
        run: |
          echo "Waiting 30 seconds for services to fully start..."
          sleep 30

          # Retry health check up to 5 times with 10 second intervals
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f http://${{ secrets.VPS_HOST }}/api/health; then
              echo "✅ Health check passed!"
              exit 0
            fi
            if [ $i -lt 5 ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done

          echo "❌ Health check failed after 5 attempts"
          echo "Checking API logs..."

          ssh -i ~/.ssh/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/fin-u-ch
            echo "===== API Container Logs ====="
            docker logs fin-u-ch-api --tail 50
          EOF

          exit 1

      - name: Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Manual fix completed successfully!"
            echo "🎉 Deployment is now working!"
          else
            echo "❌ Manual fix failed"
            echo "Please check the logs above for details"
          fi
