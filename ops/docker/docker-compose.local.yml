# ================================================
# Docker Compose для ЛОКАЛЬНОГО ТЕСТИРОВАНИЯ
# ================================================
# Запускает полный стек как в production, но локально
# Использует локально собранные образы (не из registry)
#
# Использование:
#   1. Собрать образы: pnpm docker:build
#   2. Запустить: pnpm docker:up
#   3. Остановить: pnpm docker:down
#
# Документация: ops/docker/README.md

services:
  postgres:
    image: postgres:15-alpine
    container_name: fin-u-ch-postgres-local
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fin_u_ch_local}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - '5433:5432'
    volumes:
      - postgres_data_local:/var/lib/postgresql/data
    networks:
      - fin-u-ch-local
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: fin-u-ch-redis-local
    ports:
      - '6380:6379'
    networks:
      - fin-u-ch-local
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    image: fin-u-ch/api:local
    container_name: fin-u-ch-api-local
    build:
      context: ../..
      dockerfile: ops/docker/api.Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fin_u_ch_local}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-5578561f9225caf35f780aec41a527d3}
      JWT_ACCESS_EXPIRES_IN: ${JWT_ACCESS_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      NODE_ENV: production
      PORT: 4000
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fin-u-ch-local
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost:4000/api/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    image: fin-u-ch/web:local
    container_name: fin-u-ch-web-local
    build:
      context: ../..
      dockerfile: ops/docker/web.Dockerfile
    ports:
      - '8080:80'
    networks:
      - fin-u-ch-local
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost/ || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  worker:
    image: fin-u-ch/worker:local
    container_name: fin-u-ch-worker-local
    build:
      context: ../..
      dockerfile: ops/docker/worker.Dockerfile
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-fin_u_ch_local}
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fin-u-ch-local
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: fin-u-ch-nginx-local
    ports:
      - '80:80'
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
      - web
    networks:
      - fin-u-ch-local
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --quiet --tries=1 --spider http://localhost/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_local:

networks:
  fin-u-ch-local:
    driver: bridge
