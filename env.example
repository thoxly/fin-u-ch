# ==============================================
# FIN-U-CH Environment Configuration
# ==============================================
# ❗ ВАЖНО: Этот файл - ШАБЛОН (попадает в Git, БЕЗ реальных секретов)
#
# Как использовать:
# 1. Скопируйте этот файл: cp env.example .env
# 2. Файл .env создастся локально (НЕ попадет в Git - защищен .gitignore)
# 3. Для локальной разработки можно оставить значения как есть
# 4. Для staging/production замените на реальные credentials
#
# Документация: docs/ENV_WORKFLOW.md

# ==============================================
# ОБЩИЕ НАСТРОЙКИ
# ==============================================
NODE_ENV=development
# Возможные значения: development, staging, production

# ==============================================
# DATABASE (PostgreSQL)
# ==============================================
# Локальная разработка - выберите порт в зависимости от сценария:

# Вариант 1 (Гибрид - рекомендуется): docker-compose.yml на стандартных портах
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/fin_u_ch_dev

# Вариант 2 (Полный Docker стек): docker-compose.local.yml на нестандартных портах
# DATABASE_URL=postgresql://postgres:postgres@localhost:5433/fin_u_ch_dev

# Для продакшена используйте:
# DATABASE_URL=postgresql://user:password@host:5432/fin_u_ch
# или connection pooling:
# DATABASE_URL=postgresql://user:password@host:6543/fin_u_ch?pgbouncer=true

# Настройки PostgreSQL для Docker Compose:
POSTGRES_DB=fin_u_ch_dev
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# ==============================================
# REDIS
# ==============================================
# Локальная разработка - выберите порт в зависимости от сценария:

# Вариант 1 (Гибрид - рекомендуется): docker-compose.yml
REDIS_URL=redis://localhost:6379

# Вариант 2 (Полный Docker стек): docker-compose.local.yml
# REDIS_URL=redis://localhost:6380

# Для продакшена с паролем:
# REDIS_URL=redis://:password@host:6379
# или с TLS:
# REDIS_URL=rediss://:password@host:6380

# ==============================================
# API (Backend)
# ==============================================
PORT=4000

# JWT Authentication
JWT_SECRET=your-secret-key-here-change-me-in-production
# ⚠️ ВАЖНО: В продакшене используйте крипто-стойкий секрет!
# Сгенерировать можно так: openssl rand -hex 32

JWT_ACCESS_EXPIRES_IN=15m
# Время жизни access токена (15 минут)

JWT_REFRESH_EXPIRES_IN=7d
# Время жизни refresh токена (7 дней)

# ==============================================
# WEB (Frontend)
# ==============================================
# API URL для frontend приложения

# Локальная разработка (используйте Vite proxy для избежания CORS):
# Запросы /api/* автоматически проксируются на http://localhost:4000
VITE_API_URL=/api

# Альтернатива (прямое подключение, может быть CORS):
# VITE_API_URL=http://localhost:4000

# Для продакшена (Nginx reverse proxy):
# VITE_API_URL=/api

# ==============================================
# AI CODE REVIEW (GitHub Actions)
# ==============================================
# API ключ для Claude AI Code Review
ANTHROPIC_API_KEY=sk-ant-api03-ukm...

# ==============================================
# DOCKER & DEPLOYMENT
# ==============================================
# Используется в docker-compose.prod.yml

# Docker Registry
DOCKER_REGISTRY=ghcr.io
DOCKER_IMAGE_PREFIX=thoxly
IMAGE_TAG=latest

# Nginx Configuration
NGINX_CONFIG=nginx.conf
# Для SSL используйте: nginx-ssl.conf

# SSL Certificates Path
SSL_CERT_PATH=./ops/nginx/ssl
# Путь к SSL сертификатам (для Certbot/Let's Encrypt)

# ==============================================
# PGADMIN (опционально для локальной разработки)
# ==============================================
PGADMIN_DEFAULT_EMAIL=admin@example.com
PGADMIN_DEFAULT_PASSWORD=admin

# ==============================================
# МОНИТОРИНГ И ЛОГИРОВАНИЕ (будущее)
# ==============================================
# Раскомментируйте когда будете добавлять:

# Sentry (Error Tracking)
# SENTRY_DSN=https://...@sentry.io/...
# SENTRY_ENVIRONMENT=development

# LogTail / Better Stack
# LOGTAIL_TOKEN=...

# Prometheus / Grafana
# METRICS_ENABLED=true
# METRICS_PORT=9090

# ==============================================
# FEATURE FLAGS (будущее)
# ==============================================
# ENABLE_ANALYTICS=false
# ENABLE_EMAIL_NOTIFICATIONS=false
# MAINTENANCE_MODE=false

# ==============================================
# EXTERNAL SERVICES (будущее)
# ==============================================
# Email (для уведомлений)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password

# S3 / MinIO (для файлов)
# S3_ENDPOINT=https://s3.amazonaws.com
# S3_BUCKET=fin-u-ch-files
# S3_ACCESS_KEY=...
# S3_SECRET_KEY=...

# ==============================================
# CI/CD ПЕРЕМЕННЫЕ (GitHub Actions)
# ==============================================
# В CI/CD окружении .env файл недоступен (он в .gitignore)
# Переменные должны быть объявлены явно в .github/workflows/ci-cd.yml
#
# Документация: docs/ENV_CI_CD.md
#
# Необходимые переменные для тестов:
# - DATABASE_URL=postgresql://postgres:postgres@localhost:5432/fin_u_ch_test
# - REDIS_URL=redis://localhost:6379
# - JWT_SECRET=test-jwt-secret
# - NODE_ENV=test
# - PORT=4000
#
# GitHub Secrets (настройка через Settings → Secrets):
# - ANTHROPIC_API_KEY - для AI Code Review
# - GHCR_TOKEN - для Docker registry
# - VPS_HOST, VPS_USER, VPS_SSH_KEY, SERVER_DOMAIN - для деплоя
# - SSL_FULLCHAIN_B64, SSL_PRIVKEY_B64 - SSL сертификат

# ==============================================
# ПРИМЕЧАНИЯ
# ==============================================
# 1. Не коммитьте .env файл в Git (уже в .gitignore)
# 2. Для каждого окружения создавайте свой .env файл
# 3. В CI/CD используйте переменные окружения или secrets (см. выше)
# 4. Для продакшена всегда меняйте дефолтные пароли и секреты!
# 5. Windows пользователи: используйте LF line endings (git config core.autocrlf input)

